import asyncio
import aiohttp
import yt_dlp
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound

from bot.modules.logger import get_logger

logger = get_logger(__name__)

class Video:
    """–ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ"""
    def __init__(self, url: str) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞.

        :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
        """
        self.url: str = url
        self.id: str
        self.title: str
        self.extractor: str
        self.info: dict = {}
        self.views: int | None = None
        self.likes: int | None = None
        self.dislikes: int | None = None
        self.upload_date: str | None = None
        self.uploader: str | None = None
        self.duration: int
        self.__raw_formats: list[str, dict] | None = None
        self.formats: dict[str, dict[str, str]] | None = {}

    async def fetch_info(self):
        """–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±–Ω–æ–≤–ª—è—è –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞."""
        self.info = await asyncio.to_thread(yt_dlp.YoutubeDL().extract_info, self.url, download = False)
        self.__parse_info()
        await self.__update_dislikes()

    def get_likes_dislikes_text(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤.

        :returns: –°—Ç—Ä–æ–∫–∞ –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤ üëç –∏ üëé. None, –µ—Å–ª–∏ –Ω–µ—Ç –ª–∞–π–∫–æ–≤ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤"""
        if self.likes is None or self.dislikes is None:
            return None
        likes_count = int(self.likes / (self.dislikes + self.likes) * 10)
        dislikes_count = 10 - likes_count
        return "üëç" * likes_count + "üëé" * dislikes_count

    def get_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ —á–∞—Å–∞, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.

        :returns: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS –∏–ª–∏ HH:MM:SS"""
        s = self.duration
        if s >= 3600:
            return f"{int(s / 3600):0>2}:{int(s % 3600) // 60:0>2}:{int(s % 60):0>2}"
        return f"{int(s // 60):0>2}:{int(s % 60):0>2}"

    def __parse_info(self):
        """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤."""
        if not self.info:
            return
        self.url = self.info.get("webpage_url", self.url)
        self.id = self.info.get("id")
        self.title = self.info.get("title")
        self.duration = self.info.get("duration")
        self.description = self.info.get("description")
        self.views = self.info.get("view_count")
        self.likes = self.info.get("like_count")
        self.dislikes = self.info.get("dislike_count")
        self.upload_date = self.info.get("upload_date")
        self.__raw_formats = self.info.get("formats")
        if self.upload_date is not None:
            year, month, day = self.upload_date[:4], self.upload_date[4:6], self.upload_date[6:]
            self.upload_date = f"{day}.{month}.{year}"
        self.uploader = self.info.get("uploader")
        self.extractor = self.info.get("extractor")

    async def __update_dislikes(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ —É YouTube"""
        if self.extractor != "youtube":
            return
        url = f"https://returnyoutubedislikeapi.com/votes?videoId={self.id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    self.dislikes = data.get("dislikes")


async def fetch_transcript(video_id: str) -> str:
    languages: list[str] = ["ru", "en"]
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–µ–æ —Å YouTube"""
    try:
        transcript_list = YouTubeTranscriptApi().fetch(video_id, languages = languages)
        text = " ".join(snippet.text for snippet in transcript_list.snippets)
        return text
    except TranscriptsDisabled as e:
        logger.error(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞: https://youtu.be/{video_id}/")
        raise e
    except NoTranscriptFound as e:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –¥–ª—è —è–∑—ã–∫–æ–≤ {languages} –¥–ª—è –≤–∏–¥–µ–æ: https://youtu.be/{video_id}/")
        raise e
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: "
                     f"https://youtu.be/{video_id}/.", exc_info=e)
        raise e
