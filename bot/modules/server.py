import asyncio
import logging
import os
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import CommandStart
from aiogram.utils.formatting import Text, ExpandableBlockQuote, Code
from aiogram.types import LinkPreviewOptions

from youtube_transcript_api import CouldNotRetrieveTranscript
from dotenv import load_dotenv
from bot.modules.yt_api import Video, fetch_transcript
from bot.modules.ya_api import summarize_text
from bot.modules.logger import get_logger

load_dotenv()
logger = get_logger(__name__)

dp = Dispatcher()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω.")
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ TELEGRAM_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
bot = Bot(token = TELEGRAM_TOKEN)
del TELEGRAM_TOKEN

YOUTUBE_URL_REGEX = re.compile(
    r'(?:https?://)?(?:www.)?(?:youtube\.com/watch\?v=|youtu\.be/)([A-Za-z0-9_-]+)'
)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ.",
    )


def find_urls(message: types.Message) -> list[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :returns: –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.
    """
    urls = []
    if not message.entities:
        return urls
    for entity in message.entities:
        if entity.type == "url":
            urls.append(entity.extract_from(message.text))
        elif entity.type == "text_link":
            urls.append(entity.url)
    return urls

def content_generator(video: Video) -> Text:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    :param video: –û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ–ª—è–º–∏.
    :returns: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    content = Text(
        video.title,
        "\nüïí ", Code(video.get_time()),
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞ (None),
    # —Ç–æ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã. –°—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
    # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –¥–∏–∑–ª–∞–π–∫–æ–≤), –∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–µ –ø—É—Å—Ç–æ–π. –ë–µ–∑ –ª–∞–π–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
    words = (
        ("\nüëÄ ", video.views, ""), (" | üëç ", video.likes, ""), (" : ", video.dislikes, " üëé"),
        ("\nüì§ ", video.upload_date, ""),
        ("\nüë§ ", video.uploader, ""),
        ("\n", video.get_likes_dislikes_text(), ""),
        ("\n–û–ø–∏—Å–∞–Ω–∏–µ: ", ExpandableBlockQuote(video.description) if video.description else None, "")
    )
    for pre, body, post in words:
        if body is not None:
            content += Text(pre, body, post)
    return content

@dp.message(F.text)
async def cmd_text(message: types.Message):
    urls = find_urls(message)
    if not urls:
        await message.reply("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ :(")
        return
    if len(urls) > 1:
        await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {len(urls)}. "
                            f"–ù–æ –ø–æ–∫–∞ —è –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ :(")
        return
    url = urls[0]
    small_link_options = LinkPreviewOptions(
        url = url,
        prefer_small_media = True
    )
    answer = await message.reply(f"–Ø –Ω–∞—à—ë–ª —Å—Å—ã–ª–∫—É: {urls[0]}.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
                                 link_preview_options = small_link_options)
    video = Video(url)
    await video.fetch_info()
    await answer.edit_text(**content_generator(video).as_kwargs(),
                           link_preview_options = small_link_options)
    match = YOUTUBE_URL_REGEX.search(url)
    if not match:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL-–∞–¥—Ä–µ—Å YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    video_id = match.group(1)
    m = await message.reply("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...")
    try:
        transcript = await fetch_transcript(video_id)
    except CouldNotRetrieveTranscript as e:
        await m.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
        return
    await m.edit_text("üß† –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é YandexGPT...")
    try:
        summary = await summarize_text(transcript)
    except Exception as e:
        if re.match(r"text length is \d+, which is outside the range", e.args[0]):
            await m.edit_text("‚ùå –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç :(")
        else:
            await m.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å YandexGPT.")
        return
    try:
        await m.edit_text(f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n\n{summary}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", exc_info=e)
        raise e


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())